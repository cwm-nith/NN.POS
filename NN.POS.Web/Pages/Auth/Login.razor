@using NN.POS.Model.Dtos.Users
@using NN.POS.Web.Components.Dialogs
@using NN.POS.Web.Validations.Auth

@layout UnAuthLayout

@attribute [Route(RouteName.Home)]
@attribute [Route(RouteName.Login)]


<MudPaper Height="80vh" Width="90%" Class="m-0 p-0">
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudContainer Class="pt-3 d-flex flex-column justify-center align-center w-100">
            <MudText Typo="Typo.h5" Class="font-weight-bold"><b>NN POS System</b></MudText>
            <MudText Typo="Typo.subtitle1">Make Your Business Easier, Grow and Success</MudText>
        </MudContainer>
        <MudContainer Class="mt-5" />
        <MudGrid Class="mt-5">
            <MudHidden Breakpoint="Breakpoint.Sm" Invert="true">
                <MudItem lg="1" sm="0"/>
            </MudHidden>
            <MudItem sm="12" md="5" Class="mt-5">
                <MudForm Model="_loginModel" @ref="_form" Validation="_loginValidator.ValidateValue">
                    <MudCard Class="p-5">
                        <MudText Typo="Typo.h5" Class="font-weight-bold text-center">
                            <b>Login</b>
                        </MudText>
                        <br />
                        @if (!string.IsNullOrEmpty(_apiErrorMessages))
                        {
                            <MudChip T="string" Class="d-flex justify-center" Color="Color.Error">
                                <p>@_apiErrorMessages</p>
                            </MudChip>
                        }

                        <MudTextField @bind-Value="_loginModel.Username"
                                      For="@(() => _loginModel.Username)"
                                      Immediate="true"
                                      Label="Username"/>

                        <MudTextField @bind-Value="_loginModel.Password"
                                      For="@(() => _loginModel.Password)"
                                      Immediate="true"
                                      Label="Password" InputType="InputType.Password"/>
                        <MudCardActions Class="d-flex justify-content-center">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="LoginAsync">Login</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudForm>
            </MudItem>
            <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="false">
                <MudItem lg="1" sm="0"/>
                <MudItem sm="12" md="4" Class="">
                    <MudImage
                        Alt="NN POS System"
                        Src="/Contents/LoginPage.jpg"
                        ObjectFit="ObjectFit.Contain"
                        Height="300"
                        Width="300"/>
                </MudItem>
            </MudHidden>
        </MudGrid> 
    </MudContainer>
</MudPaper>


@code {
    readonly LoginDto _loginModel = new();

    readonly LoginValidation _loginValidator = new();

    MudForm? _form;

    string? _apiErrorMessages;

    private async Task LoginAsync()
    {
        await _form?.Validate()!;
        if (_form.IsValid)
        {
            var parameters = new DialogParameters<LoadingDialog>();

            var options = new DialogOptions { FullScreen = true, BackgroundClass = "dialog-bg-blur" };
            var loading = await Dialog.ShowAsync<LoadingDialog>("", parameters, options);

            var jsonPayload = JsonConvert.SerializeObject(_loginModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, MediaTypeNames.Application.Json);
            var httpClient = HttpClientFactory.CreateClient(AppConstants.HttpClientName);
            var response = await httpClient.PostAsync($"{Setting.PrefixEndpoint}auth/login", requestContent);

            Dialog.Close((DialogReference)loading);

            switch (response.StatusCode)
            {
                case HttpStatusCode.BadRequest:
                case HttpStatusCode.Unauthorized:
                    var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                    _apiErrorMessages = errors?["message"];
                    break;
                case HttpStatusCode.OK:
                    var tokenResponse = await response.Content.ReadFromJsonAsync<UserDto>();
                    await LocalStorageService.SetItemAsync("jat", tokenResponse?.Token);
                    (AuthStateProvider as CustomAuthProvider)?.NotifyAuthState();
                    NavigationManager.NavigateTo(RouteName.Dashboard);
                    break;
                default:
                    _apiErrorMessages = "Login Failed Please try after some time";
                    break;
            }
        }
    }
}
