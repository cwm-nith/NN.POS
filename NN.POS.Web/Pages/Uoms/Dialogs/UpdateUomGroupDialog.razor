@using NN.POS.Model.Dtos.UnitOfMeasures
@using NN.POS.Web.Validations.Uoms.UomGroups

@namespace NN.POS.Web.Pages.Uoms.Dialogs

<MudDialog>
    <DialogContent>
        <MudForm Model="_uomGroupModel" Validation="_uomValidator.ValidateValue" @ref="_form">
            <MudGrid Spacing="5" Justify="Justify.Center">
                <MudItem lg="5" sm="12" xs="12">
                    <MudTextField @bind-Value="_uomGroupModel.Name"
                                  For="@(() => _uomGroupModel.Name)"
                                  Immediate="true"
                                  Label="Name" />
                </MudItem>
            </MudGrid>

            @if (!string.IsNullOrEmpty(_apiErrorMessages))
            {
                <MudChip Class="d-flex justify-center" Color="Color.Error">
                    <p>@_apiErrorMessages</p>
                </MudChip>
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(Cancel)">Cancel</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="@(Submit)">Yes</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public UnitOfMeasureGroupDto? Data { get; set; }

    [Parameter]
    public MudTable<UnitOfMeasureGroupDto>? Table { get; set; }

    private UpdateUomGroupDto _uomGroupModel = new();

    readonly UpdateUomGroupValidation _uomValidator = new();

    MudForm? _form;

    string? _apiErrorMessages;


    protected override void OnParametersSet()
    {
        _uomGroupModel = new UpdateUomGroupDto
            {
                Name = Data?.Name
            };
        base.OnParametersSet();
    }

    private async Task Submit()
    {
        await _form?.Validate()!;
        if (_form.IsValid)
        {
            var jsonPayload = JsonSerializer.Serialize(_uomGroupModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, MediaTypeNames.Application.Json);
            var httpClient = HttpClientFactory.CreateClient(AppConstants.HttpClientName);
            var response = await httpClient.PutAsync($"{Setting.PrefixEndpoint}unitOfMeasure/uom-group/{Data?.Id}", requestContent);

            switch (response.StatusCode)
            {
                case HttpStatusCode.BadRequest:
                    {
                        var errors = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                        _apiErrorMessages = $"{errors?.Message} [{errors?.Code}]";
                        break;
                    }
                case HttpStatusCode.Unauthorized:
                    {
                        NavigationManager.NavigateTo(RouteName.Login);
                        break;
                    }
                case HttpStatusCode.OK:
                    {
                        MudDialog?.Close(DialogResult.Ok(true));
                        Table?.ReloadServerData();
                        break;
                    }
                default:
                    _apiErrorMessages = "Something went wrong, Please try after some time";
                    break;
            }

        }

    }
    private void Cancel() => MudDialog?.Cancel();
}
