@attribute [Route(RouteName.CreateSupplier)]
@using static Model.Enums.BusinessPartnerEnum
@using NN.POS.Model.Dtos.BusinessPartners
@using NN.POS.Web.Validations.Contacts

@implements IDisposable

<MudContainer Class="p-2">
    <MudPaper Class="d-flex flex-row flex-grow-1 gap-4 mb-2" Elevation="0">
        <MudLink Href="@RouteName.Supplier">
            <MudButton Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.ArrowBack"
                       Color="Color.Primary">
                Back
            </MudButton>
        </MudLink>
    </MudPaper>
    <MudCard>
        <MudForm Model="_supplyModel" Validation="_supplyValidator.ValidateValue" @ref="_form">
            <MudCardContent>
                <MudContainer Class="text-center">
                    <MudChip Color="Color.Primary" Class="p-4">
                        <MudText Typo="Typo.h6">Create New Supply</MudText>
                    </MudChip>
                </MudContainer>
                <MudDivider Class="mt-2" />

                <MudGrid Spacing="5" Justify="Justify.Center">
                    <MudItem lg="5" sm="12">
                        <MudTextField @bind-Value="_supplyModel.FirstName"
                                      For="@(() => _supplyModel.FirstName)"
                                      Immediate="true"
                                      Label="Last name" />


                    </MudItem>
                    <MudItem lg="5" sm="12">
                        <MudTextField @bind-Value="_supplyModel.LastName"
                                      For="@(() => _supplyModel.LastName)"
                                      Immediate="true"
                                      Label="Last name" />
                    </MudItem>
                </MudGrid>

                <MudGrid Spacing="5" Justify="Justify.Center">
                    <MudItem lg="5" sm="12">
                        <MudTextField @bind-Value="_supplyModel.Email"
                                      For="@(() => _supplyModel.Email)"
                                      Immediate="true"
                                      Label="Email" />


                    </MudItem>
                    <MudItem lg="5" sm="12">
                        <MudTextField @bind-Value="_supplyModel.PhoneNumber"
                                      For="@(() => _supplyModel.PhoneNumber)"
                                      Immediate="true"
                                      Label="Phone number" />
                    </MudItem>
                </MudGrid>

                <MudGrid Spacing="5" Justify="Justify.Center">
                    <MudItem lg="5" sm="12">
                        <MudSelect @bind-Value="_supplyModel.BusinessType" For="@(() => _supplyModel.BusinessType)" Label="Business Type">
                            @foreach (BusinessType option in Enum.GetValues(typeof(BusinessType)))
                            {
                                <MudSelectItem Value="option" />
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem lg="5" sm="12">
                        <MudSelect ReadOnly="true" @bind-Value="_supplyModel.ContactType" For="@(() => _supplyModel.ContactType)" Label="Contact Type">
                            <MudSelectItem Value="ContactType.Supplier" />
                        </MudSelect>
                    </MudItem>
                </MudGrid>

                <MudGrid Spacing="5" Justify="Justify.Center">
                    <MudItem lg="10" sm="12">
                        <MudTextField @bind-Value="_supplyModel.Address"
                                      For="@(() => _supplyModel.Address)"
                                      Immediate="true"
                                      Label="Address" />
                    </MudItem>
                </MudGrid>

                @if (!string.IsNullOrEmpty(_apiErrorMessages))
                {
                    <MudChip Variant="Variant.Outlined" Color="Color.Error">
                        @_apiErrorMessages
                    </MudChip>
                }

            </MudCardContent>

            <MudCardActions>
                <MudGrid>
                    <MudItem sm="0" lg="9"></MudItem>
                    <MudItem sm="12" lg="3">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.AddCircle"
                                   OnClick="@CreateSupplyAsync">
                            Save
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudCardActions>
        </MudForm>
    </MudCard>
</MudContainer>

@code {

    readonly CreateBusinessPartnerDto _supplyModel = new()
        {
            ContactType = ContactType.Supplier
        };

    readonly CreateSupplyValidator _supplyValidator = new();

    MudForm? _form;

    string? _apiErrorMessages;

    protected override void OnInitialized()
    {
        NavbarStateService.SetExpend(RouteName.Contact);
        NavbarStateService.SetActive(RouteName.Supplier);
        NavbarStateService.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        NavbarStateService.OnStateChange -= StateHasChanged;
    }

    private async Task CreateSupplyAsync()
    {
        await _form?.Validate()!;
        if (_form.IsValid)
        {
            var jsonPayload = JsonConvert.SerializeObject(_supplyModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, MediaTypeNames.Application.Json);
            var httpClient = HttpClientFactory.CreateClient(AppConstants.HttpClientName);
            var response = await httpClient.PostAsync($"{Setting.PrefixEndpoint}BusinessPartner", requestContent);

            _apiErrorMessages = await ErrorApiHelper.GetErrorMessageResponse(
                response,
                () => NavigationManager.NavigateTo(RouteName.Login),
                () => NavigationManager.NavigateTo(RouteName.Supplier));
        }
    }
}
