@using NN.POS.Model.Dtos.Tax
@using NN.POS.Web.Components.Dialogs
@using NN.POS.Web.Pages.Tax.Dialogs

@attribute [Route(RouteName.Tax)]

<MudContainer Class="mt-2">

    <MudPaper Class="d-flex flex-row flex-grow-1 gap-4 mb-2" Elevation="0">
        <MudButton Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.AddCircle"
                   Color="Color.Primary"
                   OnClick="@Create">
            Create
        </MudButton>
    </MudPaper>

    <MudTable ServerData="@(new Func<TableState, Task<TableData<TaxDto>>>(ServerReload))"
              Dense="true"
              Hover="true"
              Striped="true"
              @ref="_table">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Roles</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(OnSearch)" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Rate</MudTh>
            <MudTh>Rate Type</MudTh>
            <MudTh>Effective Date</MudTh>
            <MudTh>Created At</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Rate">@context.Rate.ToString("N")</MudTd>
                <MudTd DataLabel="Rate Type">@context.Type</MudTd>
                <MudTd DataLabel="Effective Date">@context.EffectiveDate.ToLocalTime().ToString("f")</MudTd>
                <MudTd DataLabel="Created At">@context.CreatedAt.ToLocalTime().ToString("f")</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.ModeEdit" Color="Color.Warning" OnClick="@(() => Update(context))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => Delete(context.Id))"></MudIconButton>
                </MudTd>
            </RowTemplate>

            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudContainer>

@code {
    private MudTable<TaxDto>? _table;
    private string _searchString = "";


    protected override void OnInitialized()
    {
        NavbarStateService.SetExpend(RouteName.Settings);
        NavbarStateService.SetActive(RouteName.Tax);
        NavbarStateService.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        NavbarStateService.OnStateChange -= StateHasChanged;
    }

    private async Task<TableData<TaxDto>> ServerReload(TableState state)
    {
        var httpClient = HttpClientFactory.CreateClient(AppConstants.HttpClientName);

        var path = $"{Setting.PrefixEndpoint}tax?Page={state.Page + 1}&Results={state.PageSize}&search={_searchString}";

        var data = await httpClient.GetFromJsonAsync<PagedResult<TaxDto>>(path);

        return new TableData<TaxDto>
            {
                Items = data?.Items,
                TotalItems = Convert.ToInt32(data?.TotalResults)
            };
    }

    protected void Create()
    {
        var parameters = new DialogParameters<CreateUpdateTaxDialog>
        {
            {
                x => x.Table, _table
            }
        };

        var options = new DialogOptions { CloseButton = true };

        Dialog.Show<CreateUpdateTaxDialog>("Create", parameters, options);
    }

    protected void Update(TaxDto data)
    {
        var parameters = new DialogParameters<CreateUpdateTaxDialog>
        {
            {
                x => x.Table, _table
            },
            {
                x => x.Data, data
            }
        };

        var options = new DialogOptions { CloseButton = true };

        Dialog.Show<CreateUpdateTaxDialog>("Update", parameters, options);
    }

    private void Delete(int id)
    {
        var parameters = new DialogParameters<DeleteDialog<TaxDto>>
            {
                {
                    x => x.Endpoint, $"tax/{id}"
                },
                {
                    x => x.Table, _table
                }
            };

        var options = new DialogOptions { CloseButton = true };

        Dialog.Show<DeleteDialog<TaxDto>>("Delete", parameters, options);
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table?.ReloadServerData();
    }
}
