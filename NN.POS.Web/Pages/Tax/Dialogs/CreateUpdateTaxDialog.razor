@using NN.POS.Model.Dtos.Tax
@using NN.POS.Model.Enums
@using NN.POS.Web.Validations.Tax

@namespace NN.POS.Web.Pages.Tax.Dialogs

<MudDialog>
    <DialogContent>
        <MudForm Model="_taxModel" Validation="_taxValidator.ValidateValue" @ref="_form">
            <MudGrid Justify="Justify.Center">
                <MudItem lg="6" sm="12" xs="12">
                    <MudTextField @bind-Value="_taxModel.Name"
                                  For="@(() => _taxModel.Name)"
                                  Immediate="true"
                                  Label="Name"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense" />
                </MudItem>
                <MudItem lg="6" sm="12" xs="12">
                    <MudDatePicker @bind-Date="_taxModel.EffectiveDate"
                                   For="@(() => _taxModel.EffectiveDate)"
                                   Immediate="true"
                                   Label="Effective Date"
                                   Variant="Variant.Outlined"
                                   Margin="Margin.Dense"/>
                </MudItem>
            </MudGrid>
            
            <MudGrid Justify="Justify.Center">
                <MudItem lg="6" sm="12" xs="12">
                    <MudSelect @bind-Value="_taxModel.Type"
                               For="@(() => _taxModel.Type)"
                               Label="Rate Type"
                               Variant="Variant.Outlined"
                               Margin="Margin.Dense">
                        @foreach (TaxType option in Enum.GetValues(typeof(TaxType)))
                        {
                            <MudSelectItem Value="option" />
                        }
                    </MudSelect>
                </MudItem>
                <MudItem lg="6" sm="12" xs="12">
                    <MudTextField @bind-Value="_taxModel.Rate"
                                  For="@(() => _taxModel.Rate)"
                                  Immediate="true"
                                  Label="Rate"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense" />
                </MudItem>
            </MudGrid>

            @if (!string.IsNullOrEmpty(_apiErrorMessages))
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Error">
                    @_apiErrorMessages
                </MudChip>
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(Cancel)">Cancel</MudButton>
        <MudButton Color="Color.Error"
                   Variant="Variant.Filled"
                   OnClick="@CreateUpdate">@(Data.Id > 0 ? "Update" : "Create")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public TaxDto Data { get; set; } = new();

    [Parameter]
    public MudTable<TaxDto>? Table { get; set; }

    private CreateTaxDto _taxModel = new();

    readonly CreateUpdateTaxValidation _taxValidator = new();

    MudForm? _form;

    string? _apiErrorMessages;


    protected override void OnParametersSet()
    {
        _taxModel = new CreateTaxDto
            {
                Name = Data.Name,
                EffectiveDate = Data.EffectiveDate,
                Rate = Data.Rate,
                Type = Data.Type
            };
        base.OnParametersSet();
    }

    private async Task CreateUpdate()
    {
        await _form?.Validate()!;

        if (_form.IsValid)
        {
            var jsonPayload = JsonConvert.SerializeObject(_taxModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, MediaTypeNames.Application.Json);
            var httpClient = HttpClientFactory.CreateClient(AppConstants.HttpClientName);

            HttpResponseMessage response;

            if (Data.Id > 0)
            {
                response = await httpClient.PutAsync($"{Setting.PrefixEndpoint}tax/{Data.Id}", requestContent);
            }
            else
            {
                response = await httpClient.PostAsync($"{Setting.PrefixEndpoint}tax", requestContent);
            }

            _apiErrorMessages = await ErrorApiHelper.GetErrorMessageResponse(response,
                () =>
                {
                    NavigationManager.NavigateTo(RouteName.Login);
                },
                () =>
                {
                    MudDialog?.Close(DialogResult.Ok(true));
                    Table?.ReloadServerData();
                });
        }

    }

    private void Cancel() => MudDialog?.Cancel();
}
