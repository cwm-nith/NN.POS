@using NN.POS.Model.Dtos.ItemMasters
@using NN.POS.Model.Enums
@using NN.POS.Web.Components.Dialogs
@attribute [Route(RouteName.ItemMasterData)]
@implements IDisposable

<MudContainer Class="mt-2">

    <MudPaper Class="d-flex flex-row flex-grow-1 gap-4 mb-2" Elevation="0">
        <MudLink Href="@RouteName.ItemMasterDataCreate">
            <MudButton Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.AddCircle"
                       Color="Color.Primary">
                Create
            </MudButton>
        </MudLink>
    </MudPaper>

    <MudTable ServerData="@(new Func<TableState, Task<TableData<ItemMasterDataDto>>>(ServerReload))"
              Dense="true"
              Hover="true"
              Striped="true"
              @ref="_table"
              RowClassFunc="@RowClassFunc">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Roles</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(OnSearch)" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>№</MudTh>
            <MudTh>Id</MudTh>
            <MudTh>Code</MudTh>
            <MudTh>Barcode</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Other Name</MudTh>
            <MudTh>UoM</MudTh>
            <MudTh>Group</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Image</MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="No">@_index</MudTd>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Code">@context.Code</MudTd>
                <MudTd DataLabel="Barcode">@context.Barcode</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Other Name">@context.OtherName</MudTd>
                <MudTd DataLabel="Uom">@context.BaseUomId</MudTd>
                <MudTd DataLabel="Group">@context.Code</MudTd>
                <MudTd DataLabel="Type">@context.Type.ToEnumString()</MudTd>
                <MudTd DataLabel="Image">
                    <MudImage Src="@($"{Setting.ApiUrl}/contents/item-master/images/{context.Image}")"
                              Class="w-25 h-25" />
                </MudTd>
                <MudTd DataLabel="Created At">@context.CreatedAt.ToLocalTime().ToString("f")</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.ModeEdit" Color="Color.Warning" OnClick="@(() => GoToUpdatePage(context.Id))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteRole(context.Id))"></MudIconButton>
                </MudTd>
            </RowTemplate>

            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudContainer>

    @code {
    private MudTable<ItemMasterDataDto>? _table;
    private string _searchString = "";
    private int _index;
    private string RowClassFunc(ItemMasterDataDto element, int rowNumber)
    {
        _index = 1 + rowNumber + (_table?.CurrentPage ?? 0) * (_table?.RowsPerPage ?? 0);
        return string.Empty;
    }

    protected override void OnInitialized()
    {
        NavbarStateService.SetExpend(RouteName.Products);
        NavbarStateService.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        NavbarStateService.OnStateChange -= StateHasChanged;
    }

    private async Task<TableData<ItemMasterDataDto>> ServerReload(TableState state)
    {
        var httpClient = HttpClientFactory.CreateClient(AppConstants.HttpClientName);

        var path = $"{Setting.PrefixEndpoint}ItemMasterData?Page={state.Page + 1}&Results={state.PageSize}&Process=0&Type=0&search={_searchString}";

        Console.WriteLine(path);

        var data =
            await httpClient.GetFromJsonAsync<PagedResult<ItemMasterDataDto>>(path);

        return new TableData<ItemMasterDataDto>
            {
                Items = data?.Items,
                TotalItems = Convert.ToInt32(data?.TotalResults)
            };
    }

    protected void GoToUpdatePage(int id)
    {
        NavigationManager.NavigateTo($"{RouteName.UpdateRole}/{id}");
    }

    private void DeleteRole(int id)
    {
        var parameters = new DialogParameters<DeleteDialog<ItemMasterDataDto>>
        {
            {
                x => x.Endpoint, $"ItemMasterData/{id}"
            },
            {
                x => x.Table, _table
            }
        };

        var options = new DialogOptions { CloseButton = true };

        Dialog.Show<DeleteDialog<ItemMasterDataDto>>("Delete", parameters, options);
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table?.ReloadServerData();
    }
}
