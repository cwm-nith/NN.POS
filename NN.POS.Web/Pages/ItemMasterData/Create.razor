@using NN.POS.Model.Dtos.ItemMasters
@using NN.POS.Model.Enums
@using NN.POS.Web.Validations.ItemMasters
@attribute [Route(RouteName.ItemMasterDataCreate)]
@implements IDisposable

<MudContainer Class="p-2">
    <MudPaper Class="d-flex flex-row flex-grow-1 gap-4 mb-2" Elevation="0">
        <MudLink Href="@RouteName.ItemMasterData">
            <MudButton Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.ArrowBack"
                       Color="Color.Primary">
                Back
            </MudButton>
        </MudLink>
        <MudContainer Class="text-center">
            <MudChip Color="Color.Primary" Class="p-4">
                <MudText Typo="Typo.body1">Create New Role</MudText>
            </MudChip>
        </MudContainer>
    </MudPaper>
    <MudCard>
        <MudForm Model="_itemModel" Validation="_itemValidator.ValidateValue" @ref="_form">
            <MudCardContent>
                <MudGrid Justify="Justify.Center">
                    <MudItem lg="4" sm="12" xs="12">
                        <MudTextField @bind-Value="_itemModel.WarehouseId"
                                      For="@(() => _itemModel.WarehouseId)"
                                      Immediate="true"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Label="Warehouse" />
                    </MudItem>
                    <MudItem lg="4" sm="12" xs="12">
                        <MudTextField @bind-Value="_itemModel.Name"
                                      For="@(() => _itemModel.Name)"
                                      Immediate="true"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Label="Name" />
                    </MudItem>
                    <MudItem lg="4" sm="12" xs="12">
                        <MudTextField @bind-Value="_itemModel.OtherName"
                                      For="@(() => _itemModel.OtherName)"
                                      Immediate="true"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Label="Other Name" />
                    </MudItem>
                </MudGrid>
                <MudGrid Justify="Justify.Center">
                    <MudItem lg="4" sm="12" xs="12">
                        <MudTextField @bind-Value="_itemModel.Description"
                                      For="@(() => _itemModel.Description)"
                                      Immediate="true"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Label="Description" />
                    </MudItem>
                    <MudItem lg="4" sm="12" xs="12">
                        <MudTextField @bind-Value="_itemModel.PriceListId"
                                      For="@(() => _itemModel.PriceListId)"
                                      Immediate="true"
                                      ReadOnly="true"
                                      Label="Price List"
                                      Class="cursor-pointer"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @onclick="@(() => SelectUomList(true))" />
                    </MudItem>
                    <MudItem lg="4" sm="12" xs="12">
                        <MudGrid>
                            <MudItem lg="4" sm="4" xs="4">
                                <MudCheckBox T="bool" @bind-Value="@_itemModel.IsPurchase"
                                             Color="Color.Primary">Purchase</MudCheckBox>
                            </MudItem>
                            <MudItem lg="4" sm="4" xs="4">
                                <MudCheckBox T="bool" @bind-Value="@_itemModel.IsSale"
                                             Color="Color.Primary">Sale</MudCheckBox>
                            </MudItem>
                            <MudItem lg="4" sm="4" xs="4">
                                <MudCheckBox T="bool" @bind-Value="@_itemModel.IsInventory"
                                             Color="Color.Primary">Inventory</MudCheckBox>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                </MudGrid>

                <MudGrid Justify="Justify.Center">
                    <MudItem lg="4" sm="12" xs="12">
                        <MudTextField @bind-Value="_itemModel.UomGroupName"
                                      For="@(() => _itemModel.UomGroupName)"
                                      Immediate="true"
                                      ReadOnly="true"
                                      Label="Uom Group"
                                      Class="cursor-pointer"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @onclick="@(() => SelectUomList(true))" />
                    </MudItem>
                    <MudItem lg="4" sm="12" xs="12">
                        <MudTextField @bind-Value="_itemModel.BaseUomName"
                                      For="@(() => _itemModel.BaseUomName)"
                                      Immediate="true"
                                      ReadOnly="true"
                                      Label="Base Uom"
                                      Class="cursor-pointer"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @onclick="@(() => SelectUomList(true))" />
                    </MudItem>
                    <MudItem lg="4" sm="12" xs="12">
                        <MudTextField @bind-Value="_itemModel.SaleUomName"
                                      For="@(() => _itemModel.SaleUomName)"
                                      Immediate="true"
                                      ReadOnly="true"
                                      Label="Sale Uom"
                                      Class="cursor-pointer"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @onclick="@(() => SelectUomList(true))" />
                    </MudItem>
                </MudGrid>

                <MudGrid Justify="Justify.Center">
                    <MudItem lg="4" sm="4" xs="12">
                        <MudTextField @bind-Value="_itemModel.PurchaseUomName"
                                      For="@(() => _itemModel.PurchaseUomName)"
                                      Immediate="true"
                                      ReadOnly="true"
                                      Label="Purchase Uom"
                                      Class="cursor-pointer"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @onclick="@(() => SelectUomList(true))" />
                    </MudItem>
                    <MudItem lg="4" sm="4" xs="12">
                        <MudTextField @bind-Value="_itemModel.SaleUomName"
                                      For="@(() => _itemModel.SaleUomName)"
                                      Immediate="true"
                                      ReadOnly="true"
                                      Label="Sale Uom"
                                      Class="cursor-pointer"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @onclick="@(() => SelectUomList(true))" />
                    </MudItem>
                    <MudItem lg="4" sm="4" xs="12">
                        <MudTextField @bind-Value="_itemModel.InventoryUomName"
                                      For="@(() => _itemModel.InventoryUomName)"
                                      Immediate="true"
                                      ReadOnly="true"
                                      Label="Inventory Uom"
                                      Class="cursor-pointer"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      @onclick="@(() => SelectUomList(true))" />
                    </MudItem>
                </MudGrid>

                <MudGrid Justify="Justify.FlexStart">
                    <MudItem lg="4" sm="12" xs="12">
                        <MudStack Style="width: 100%">
                            <MudFileUpload T="IBrowserFile"
                                              AppendMultipleFiles
                                            OnFilesChanged="OnInputFileChanged"
                                            Hidden="@false"
                                            InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                                            InputStyle="opacity:0"
                                            @ondragenter="@SetDragClass"
                                            @ondragleave="@ClearDragClass"
                                            @ondragend="@ClearDragClass">
                                 <ButtonTemplate>
                                     <MudPaper Height="250px"
                                               Outlined="true"
                                               Class="@_dragClass">
                                         <MudText Typo="Typo.body1">
                                             Drag and drop files here or click
                                         </MudText>
                                         <MudImage Src="@(_fileImage)"
                                                   Class="w-100 border-0"
                                                   Style="height: 90%"
                                                   ObjectFit="ObjectFit.Contain" />
                                     </MudPaper>
                                 </ButtonTemplate>
                             </MudFileUpload>
                         </MudStack>
                     </MudItem>
                     <MudItem lg="4" sm="4" xs="12">
                         <MudSelect @bind-Value="_itemModel.Type" 
                                    For="@(() => _itemModel.Type)" 
                                    Label="Type"
                                    Variant="Variant.Outlined"
                                    Margin="Margin.Dense">
                             @foreach (ItemMasterDataType option in Enum.GetValues(typeof(ItemMasterDataType)))
                            {
                                <MudSelectItem Value="option" />
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem lg="4" sm="4" xs="12">
                        <MudSelect @bind-Value="_itemModel.Process" 
                                   For="@(() => _itemModel.Process)" 
                                   Label="Process"
                                   Variant="Variant.Outlined"
                                   Margin="Margin.Dense">
                            @foreach (ItemMasterDataProcess option in Enum.GetValues(typeof(ItemMasterDataProcess)))
                            {
                                <MudSelectItem Value="option" />
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>

                @if (!string.IsNullOrEmpty(_apiErrorMessages))
                {
                    <MudChip Class="d-flex justify-center" Color="Color.Error">
                        <p>@_apiErrorMessages</p>
                    </MudChip>
                }

            </MudCardContent>

            <MudCardActions>
                <MudGrid>
                    <MudItem sm="0" lg="9"></MudItem>
                    <MudItem sm="12" lg="3">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.AddCircle"
                                   OnClick="@(CreateRoleAsync)">
                            Save
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudCardActions>
        </MudForm>
    </MudCard>
</MudContainer>


@code {

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    private string? _fileImage;

    readonly CreateItemMasterDataDto _itemModel = new();

    readonly CreateItemMasterDataValidator _itemValidator = new();

    MudForm? _form;

    string? _apiErrorMessages;

    protected override void OnInitialized()
    {
        NavbarStateService.SetExpendAsync(RouteName.Products);
        NavbarStateService.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        NavbarStateService.OnStateChange -= StateHasChanged;
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var buffer = new byte[e.File.Size];
        _ = await e.File.OpenReadStream().ReadAsync(buffer);
        _fileImage = $"data:{e.File.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private async Task CreateRoleAsync()
    {
        await _form?.Validate()!;
        if (_form.IsValid)
        {
            var jsonPayload = JsonSerializer.Serialize(_itemModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, MediaTypeNames.Application.Json);
            var httpClient = HttpClientFactory.CreateClient(AppConstants.HttpClientName);
            var response = await httpClient.PostAsync($"{Setting.PrefixEndpoint}itemMasterData", requestContent);

            switch (response.StatusCode)
            {
                case HttpStatusCode.BadRequest:
                    {
                        var errors = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                        _apiErrorMessages = $"{errors?.Message} [{errors?.Code}]";
                        break;
                    }
                case HttpStatusCode.Unauthorized:
                    {
                        NavigationManager.NavigateTo(RouteName.Login);
                        break;
                    }
                case HttpStatusCode.OK:
                    {
                        NavigationManager.NavigateTo(RouteName.ItemMasterData);
                        break;
                    }
                default:
                    _apiErrorMessages = "Login Failed Please try after some time";
                    break;
            }
        }
    }

    private async Task SelectUomList(bool a) { }
}
