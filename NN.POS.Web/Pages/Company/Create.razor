@using NN.POS.Model.Dtos.Company
@using NN.POS.Web.Validations.Company
@using NN.POS.Model.Dtos.Currencies
@using NN.POS.Model.Dtos.PriceLists
@using NN.POS.Web.Components.Dialogs
@attribute [Route(RouteName.CompanyCreate)]

<MudContainer Class="p-2">
    <MudPaper Class="d-flex flex-row flex-grow-1 gap-4 mb-2" Elevation="0">
        <MudLink Href="@RouteName.Company">
            <MudButton Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.ArrowBack"
                       Color="Color.Primary">
                Back
            </MudButton>
        </MudLink>
    </MudPaper>
    <MudCard>
        <MudForm Model="_comModel" Validation="_comValidator.ValidateValue" @ref="_form">
            <MudCardContent>
                <MudContainer Class="text-center">
                    <MudChip T="string" Color="Color.Primary" Class="p-4">
                        <MudText Typo="Typo.h6">Create Company</MudText>
                    </MudChip>
                </MudContainer>
                <MudDivider Class="mt-2" />

                <MudGrid Justify="Justify.Center">
                    <MudItem lg="6" xs="12" sm="12">
                        <MudTextField @bind-Value="_comModel.Name"
                                      For="@(() => _comModel.Name)"
                                      Immediate="true"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Label="Name" />
                    </MudItem>
                    <MudItem lg="6" xs="12" sm="12">
                        <MudTextField @bind-Value="_priceListName"
                                      Immediate="true"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.ArrowCircleDown"
                                      OnAdornmentClick="@ChoosePriceList"
                                      AdornmentAriaLabel="Choose Price List"
                                      ReadOnly="true"
                                      Label="Price List" />
                        <MudTextField @bind-Value="_comModel.PriceListId"
                                      For="@(() => _comModel.PriceListId)"
                                      Style="display: none" />
                    </MudItem>
                </MudGrid>

                <MudGrid Justify="Justify.Center">
                    <MudItem lg="6" xs="12" sm="12">
                        <MudTextField @bind-Value="_sysCcyName"
                                      Immediate="true"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.ArrowCircleDown"
                                      OnAdornmentClick="@ChooseSysCcy"
                                      AdornmentAriaLabel="Choose System Currency"
                                      ReadOnly="true"
                                      Label="System Currency" />
                        <MudTextField @bind-Value="_comModel.SysCcyId"
                                      For="@(() => _comModel.SysCcyId)"
                                      Style="display: none" />
                    </MudItem>
                    <MudItem lg="6" xs="12" sm="12">
                        <MudTextField @bind-Value="_localCcyName"
                                      Immediate="true"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.ArrowCircleDown"
                                      OnAdornmentClick="@ChooseLocalCcy"
                                      AdornmentAriaLabel="Choose Local Currency"
                                      ReadOnly="true"
                                      Label="Local Currency" />
                        <MudTextField @bind-Value="_comModel.LocalCcyId"
                                      For="@(() => _comModel.LocalCcyId)"
                                      Style="display: none" />
                    </MudItem>
                </MudGrid>

                <MudGrid Justify="Justify.Center">

                    <MudItem lg="6" sm="12" xs="12">
                        <MudStack Style="width: 100%">
                            <MudFileUpload T="IBrowserFile"
                                           OnFilesChanged="OnInputFileChanged"
                                           Hidden="@false"
                                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                                           InputStyle="opacity:0"
                                           @ondragenter="@SetDragClass"
                                           @ondragleave="@ClearDragClass"
                                           @ondragend="@ClearDragClass">
                                <ActivatorContent>
                                    <MudPaper Height="250px"
                                              Outlined="true"
                                              Class="@_dragClass">
                                        <MudText Typo="Typo.body1">
                                            Drag and drop files here or click
                                        </MudText>
                                        <MudImage Src="@(_fileImage)"
                                                  Class="w-100 border-0"
                                                  Style="height: 90%"
                                                  ObjectFit="ObjectFit.Contain" />
                                    </MudPaper>
                                </ActivatorContent>
                            </MudFileUpload>
                        </MudStack>
                    </MudItem>

                    <MudItem lg="6" sm="12" xs="12">
                        <MudGrid>
                            <MudItem lg="6" xs="12" sm="12">
                                <MudTextField @bind-Value="_comModel.Address"
                                              For="@(() => _comModel.Address)"
                                              Immediate="true"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense"
                                              Label="Address" />
                            </MudItem>
                            <MudItem lg="6" xs="12" sm="12">
                                <MudTextField @bind-Value="_comModel.Location"
                                              For="@(() => _comModel.Location)"
                                              Immediate="true"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense"
                                              Label="Location" />
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                </MudGrid>

                @if (!string.IsNullOrEmpty(_apiErrorMessages))
                {
                    <MudChip T="string" Variant="Variant.Outlined" Color="Color.Error">
                        @_apiErrorMessages
                    </MudChip>
                }

            </MudCardContent>

            <MudCardActions>
                <MudGrid>
                    <MudItem sm="0" lg="9"></MudItem>
                    <MudItem sm="12" lg="3">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.AddCircle"
                                   OnClick="@CreateCompanyAsync">
                            Add
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudCardActions>
        </MudForm>
    </MudCard>
</MudContainer>

@code {
    private readonly CreateCompanyDto _comModel = new();

    private readonly CreateCompanyValidation _comValidator = new();

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    private string? _fileImage;

    private readonly FileData _logoFile = new();

    private string? _priceListName;
    private string? _sysCcyName;
    private string? _localCcyName;

    MudForm? _form;

    string? _apiErrorMessages;

    protected override void OnInitialized()
    {
        NavbarStateService.SetExpend(RouteName.Settings);
        NavbarStateService.SetActive(RouteName.Company);
        NavbarStateService.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        NavbarStateService.OnStateChange -= StateHasChanged;
    }

    private async Task CreateCompanyAsync()
    {
        await _form?.Validate()!;
        if (_form.IsValid)
        {
            _comModel.LogoFile = _logoFile;
            var jsonPayload = JsonConvert.SerializeObject(_comModel);

            Console.WriteLine(jsonPayload);

            var httpClient = HttpClientFactory.CreateClient(AppConstants.HttpClientName);

            var content = new StringContent(jsonPayload, Encoding.UTF8, MediaTypeNames.Application.Json);

            var response = await httpClient.PostAsync($"{Setting.PrefixEndpoint}company", content);

            _apiErrorMessages = await ErrorApiHelper.GetErrorMessageResponse(
                response,
                () =>
            {
                NavigationManager.NavigateTo(RouteName.Login);
            },
            () =>
            {
                NavigationManager.NavigateTo(RouteName.Company);
            });
        }
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var buffer = new byte[e.File.Size];
        var logoStream = e.File.OpenReadStream(5000000);
        _ = await logoStream.ReadAsync(buffer);
        _fileImage = $"data:{e.File.ContentType};base64,{Convert.ToBase64String(buffer)}";

        _logoFile.FileName = e.File.Name;
        _logoFile.FileSize = e.File.Size;
        _logoFile.FileType = e.File.ContentType;
        _logoFile.ImageBytes = buffer;
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private async Task ChoosePriceList()
    {
        var parameters = new DialogParameters<SelectPriceListDialog>
        {
            {
                x => x.OnRefresh,
                new EventCallbackFactory().Create<PriceListDto>(this, (pl) =>
                {
                    _priceListName = pl.Name;
                    _comModel.PriceListId= pl.Id;
                })
            }
        };

        var options = new DialogOptions { CloseButton = true };

        await Dialog.ShowAsync<SelectPriceListDialog>("Price List", parameters, options);
    }

    private async Task ChooseSysCcy()
    {
        var parameters = new DialogParameters<SelectCurrencyDialog>
        {
            {
                x => x.OnRefresh,
                new EventCallbackFactory().Create<CurrencyDto>(this, (ccy) =>
                {
                    _sysCcyName = ccy.Name;
                    _comModel.SysCcyId= ccy.Id;
                })
            }
        };

        var options = new DialogOptions { CloseButton = true };

        await Dialog.ShowAsync<SelectCurrencyDialog>("System Currency", parameters, options);
    }

    private async Task ChooseLocalCcy()
    {
        var parameters = new DialogParameters<SelectCurrencyDialog>
        {
            {
                x => x.OnRefresh,
                new EventCallbackFactory().Create<CurrencyDto>(this, (ccy) =>
                {
                    _localCcyName = ccy.Name;
                    _comModel.LocalCcyId= ccy.Id;
                })
            }
        };

        var options = new DialogOptions { CloseButton = true };

        await Dialog.ShowAsync<SelectCurrencyDialog>("Local Currency", parameters, options);
    }
}
