@page "/login"
@using NN.POS.System.Model.Dtos.Users
@using NN.POS.System.Web.Providers
@using NN.POS.System.Web.Validations.Auth



<div class="ma-6 d-flex justify-center">
    <MudChip Color="Color.Primary" Class="d-flex justify-center">
        Login
    </MudChip>
</div>
<div class="ma-6 d-flex justify-center">
    <MudCard Width="500px">
        <MudForm Model="_loginModel" @ref="_form" Validation="_loginValidator.ValidateValue">
            <MudCardContent>
                @if (!string.IsNullOrEmpty(_apiErrorMessages))
                {
                    <MudChip Class="d-flex justify-center" Color="Color.Error">
                        <p>@_apiErrorMessages</p>

                    </MudChip>
                }

                <MudTextField @bind-Value="_loginModel.Username"
                              For="@(() => _loginModel.Username)"
                              Immediate="true"
                              Label="Username" />
                <MudTextField @bind-Value="_loginModel.Password"
                              For="@(() => _loginModel.Password)"
                              Immediate="true"
                              Label="Password" InputType="InputType.Password" />

            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="LoginAsync">Login</MudButton>
            </MudCardActions>
        </MudForm>
    </MudCard>
</div>

@code {
    readonly LoginDto _loginModel = new();

    readonly LoginValidation _loginValidator = new();

    MudForm? _form;

    string? _apiErrorMessages;

    private async Task LoginAsync()
    {
        await _form?.Validate()!;
        if (_form.IsValid)
        {
            var jsonPayload = JsonSerializer.Serialize(_loginModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, MediaTypeNames.Application.Json);
            var httpClient = HttpClientFactory.CreateClient(AppConstants.HttpClientName);
            var response = await httpClient.PostAsync($"{Setting.PrefixEndpoint}auth/login", requestContent);

            switch (response.StatusCode)
            {
                case HttpStatusCode.BadRequest:
                case HttpStatusCode.Unauthorized:
                {
                    var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                    _apiErrorMessages = errors?["message"];
                    break;
                }
                case HttpStatusCode.OK:
                {
                    //_navigationManager.NavigateTo("/registration-confirmation");
                    var tokenResponse = await response.Content.ReadFromJsonAsync<UserDto>();
                    await LocalStorageService.SetItemAsync("jwt-access-token", tokenResponse?.Token);
                    (AuthStateProvider as CustomAuthProvider)?.NotifyAuthState();
                    NavigationManager.NavigateTo("/");
                    break;
                }
                default:
                    _apiErrorMessages = "Login Failed Please try after some time";
                    break;
            }
        }
    }
}
