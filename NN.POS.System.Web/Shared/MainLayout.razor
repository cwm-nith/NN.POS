@using global::System.Security.Claims
@inherits LayoutComponentBase

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" 
                       Color="Color.Inherit" Edge="Edge.Start"
                       OnClick="@(_ => DrawerToggle())" />
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <MudText Typo="Typo.h6">@UserDisplayName(context.User.Claims.ToList())</MudText>
            </Authorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <AuthorizeView>
            <NotAuthorized>
                <LoginRedirect/>
            </NotAuthorized>
            <Authorized>
                <MudDrawerHeader>
                    <MudText Typo="Typo.h6">NN POS System</MudText>
                </MudDrawerHeader>
                <NavMenu/>
            </Authorized>

        </AuthorizeView> 
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code{
    
    bool _drawerOpen = true;
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    } 
    
    private static string UserDisplayName(IReadOnlyCollection<Claim> claims)
    {
        var firstName = claims.Where(c => c.Type == "nameid")
            .Select(x => x.Value).FirstOrDefault();
        
        var lastName = claims.Where(c => c.Type == "userId")
            .Select(c => c.Value).FirstOrDefault();
        
        if(!string.IsNullOrEmpty(firstName) || !string.IsNullOrEmpty(lastName))
        {
            return $"{firstName}  {lastName}";
        }
        var email = claims.Where(c => c.Type == "email").Select(x => x.Value).FirstOrDefault();
        return email ?? "";
    }
}